(def car first)
(def cdr rest)
(def cadr (λ [x] (car (cdr x))))
(def cddr (λ [x] (cdr (cdr x))))

(defmacro defn
  [name args & body]
  `(def ~name (λ ~args ~@body)))

(defmacro unless
  [pred a b]
  `(if ~pred ~b ~a))

(defn not
  [a]
  (if a false true))

(defn load-file
  [f]
  (eval (read-string (str "(do " (slurp f) ")"))))

(def *gensym-counter* (atom 0))
(defn gensym []
  (symbol (str "G__" (swap! *gensym-counter* (λ [x] (+ 1 x))))))

(defmacro or
  [& xs]
  (if (empty? xs)
    nil
    (if (= 1 (count xs))
      (first xs)
      (let* [condvar (gensym)]
        `(let* [~condvar ~(first xs)]
           (if ~condvar
             ~condvar
             (or ~@(rest xs))))))))

(defmacro cond
  [& xs]
  `(if (> ~(count xs) 0)
    (if (or (= '~(first xs) 'else) ~(first xs))
       (if (> ~(count xs) 1)
         ~(nth xs 1)
         (error "odd number of forms to cond"))
    (cond ~@(rest (rest xs))))))

(defn let-fn
  [bindings body]
  (cond
    (= (count bindings) 2)
    `((λ (~(car bindings))
        ~@body)
      ~(cadr bindings))
    else
    `((λ (~(car bindings))
        ~(let-fn (cddr bindings) body))
      ~(cadr bindings))))

(defmacro let
  [bindings & body]
  (let-fn bindings body))

(defmacro is [form]
  `(cond (not ~form) (print (str "Assertion failed:" (quote ~form)))))

(defmacro is= [& body]
  `(cond (not (= ~@body)) (print (str "Equal Assertion failed"))))
